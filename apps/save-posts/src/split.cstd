(import iso8601ForFs)

(const
  loadJsonArrayElementsFromFiles
  (async.generatorFn (paths)
    (forEach p paths
      (forEach e (JSON.parse (async.await (fs.readFile p "utf-8")))
        [ (yield [e p])]))))

(annotate
  "Utility function that should be in the standard library of Custard."
  (const
    slicesOf
    (async.generatorFn (iterator n)
      (let current [])
      (async.forEach e iterator
        (Array.push current e)
        (when (equals current.length n)
          (yield current)
          (assign current [])))
      (when (isGreaterThan current.length 0)
        (yield current)))))

(const targetPaths (Array.slice process.argv 2))
(targetPaths.sort)
(targetPaths.reverse)

(async.forEach slice
  (slicesOf (loadJsonArrayElementsFromFiles targetPaths) 20)

  (const
    [latestIndexedAt p]
    (Array.reduce
      (Array.map slice (fn ([po pa]) [po.indexedAt pa]))
      (fn (a b)
        (if
          (isGreaterThan
            (new Date (Array.first a))
            (new Date (Array.first b)))
          a else b))))

  (const
    outName
    (path.join
      (path.dirname p)
      (iso8601ForFs.toFileName latestIndexedAt ".json")))

  (console.log "Writing" outName)
  (annotate
    "Rename the destination file. If it doesn't exist, that's fine."
    (async.await
      (async.scope
        (try
          (async.await
            (fs.rename outName (text outName ".bk")))
          catch e
          (when (notEquals e.code "ENOENT")
            (throw e))))))

  (const
    postsInSlice
    (Array.map slice (fn ([post _]) post)))
  (async.await
    (fs.writeFile outName (JSON.stringify postsInSlice none 2))))
