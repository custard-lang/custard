(import iso8601ForFs)

(const
  loadJsonArrayElementsFromFiles
  (async.generatorFn (paths)
    (forEach p paths
      (forEach e (JSON.parse (async.await (fs.readFile p "utf-8")))
        (yield [e p])))))

(annotate
  "Utility function that should be in the standard library of Custard."
  (const
    slicesOf
    (async.generatorFn (iterator n)
      (let current [])
      (async.forEach e iterator
        (current.push e)
        (when (equals current.length n)
          (yield current)
          (assign current [])))
      (when (isGreaterThan current.length 0)
        (yield current)))))

(const targetPaths (process.argv.slice 2))
(targetPaths.sort)
(targetPaths.reverse)

(async.forEach slice
  (slicesOf (loadJsonArrayElementsFromFiles targetPaths) 20)

  (const
    [latestIndexedAt p]
    (slice.reduce
      (fn ([postAOrIndexedAt pathA] [postB pathB])
        (const
          postAIndexedAt (any postAOrIndexedAt.indexedAt postAOrIndexedAt))
        (if
          (isGreaterThan
            (new Date postAIndexedAt)
            (new Date postB.indexedAt))
          [postAIndexedAt pathA]
          else
          [postB.indexedAt pathB]))))

  (const
    outName
    (path.join
      (path.dirname p)
      (iso8601ForFs.toFileName latestIndexedAt ".json")))

  (console.log "Writing" outName)
  (annotate
    "Rename the destination file. If it doesn't exist, that's fine."
    (async.await
      (async.scope
        (try
          (async.await
            (fs.rename outName (text outName ".bk")))
          catch e
          (when (notEquals e.code "ENOENT")
            (throw e))))))

  (const
    postsInSlice
    (slice.map (fn ([post _]) post)))
  (async.await
    (fs.writeFile outName (JSON.stringify postsInSlice none 2))))
