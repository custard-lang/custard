(import iso8601ForFs)

(const agent (new atproto.default.BskyAgent { service: "https://bsky.social/"}))

(const myDid "did:plc:ccikl4jnjjzzap7ifyvce7d7")

(const
  password
  (async.await
    (read.default { prompt: "Pass: ", silent: true })))

(annotate
  "Break line after the prompt"
  (console.log "\n"))

(async.await
  (agent.login
    { identifier: myDid, password }))

(const outDirectory (Array.at process.argv 2))
(const statePath (path.join outDirectory "state.json"))

(const
  lastState
  (JSON.parse
    (async.await
      (fs.readFile statePath))))
(const savedUri lastState.uri)

(console.log { savedUri })

(const
  isAlreadySaved
  (fn (p)
    (equals p.uri savedUri)))

(let cursor none)
(const
  posts
  (async.await
    (async.scope
      (const result [])
      (while true
        (note "TODO: check the result")
        (const
          res
          (async.await
            (agent.getAuthorFeed { actor: myDid, limit: 100, cursor })))
        (assign cursor res.data.cursor)
        (console.log { cursor })
        (when (isLessThan res.data.feed.length 1)
          (return result))
        (forEach p res.data.feed
          (when (isAlreadySaved p.post)
            (return result))
          (Array.push result p.post))
        (when (isNone cursor)
          (return result))))))

(when (isGreaterThanOrEquals posts.length 1)
  (const
    latestIndexedAt
    (Array.reduce
      (Array.map posts (fn (p) p.indexedAt))
      (fn (a b)
        (if (isGreaterThan (new Date a) (new Date b))
          a else b))))
  (const
    outName
    (iso8601ForFs.toFileName latestIndexedAt ".json"))

  (const
    outJson (JSON.stringify posts none 2))
  (console.log "Saving" posts.length "posts on" outName)
  (async.await
    (fs.writeFile (path.join outDirectory outName) outJson))

  (const latestPost (Array.first posts))
  (const latestUri latestPost.uri)
  (async.await
    (fs.writeFile
      statePath
      (JSON.stringify { uri: latestUri } none 2))))
